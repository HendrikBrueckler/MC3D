function(target_link_libraries_system target)
  set(options PRIVATE PUBLIC INTERFACE)
  cmake_parse_arguments(TLLS "${options}" "" "" ${ARGN})
  foreach(op ${options})
    if(TLLS_${op})
      set(scope ${op})
    endif()
  endforeach(op)
  set(libs ${TLLS_UNPARSED_ARGUMENTS})

  foreach(lib ${libs})
    if (TARGET ${lib})
      get_target_property(lib_include_dirs ${lib} INTERFACE_INCLUDE_DIRECTORIES)
      if(lib_include_dirs)
        if(scope)
          target_include_directories(${target} SYSTEM ${scope} ${lib_include_dirs})
        else()
          target_include_directories(${target} SYSTEM PRIVATE ${lib_include_dirs})
        endif()
      endif()
    endif()
    if(scope)
      target_link_libraries(${target} ${scope} ${lib})
    else()
      target_link_libraries(${target} ${lib})
    endif()
  endforeach()
endfunction(target_link_libraries_system)

function(git_patch patchfile workingdirectory)
    message(STATUS "Patching ${workingdirectory} with ${patchfile}")
    execute_process(COMMAND ${GIT_EXECUTABLE} apply "${patchfile}"
                    WORKING_DIRECTORY "${workingdirectory}"
                    RESULT_VARIABLE GIT_PATCH_RESULT)
    if(NOT GIT_PATCH_RESULT EQUAL "0")
        message(FATAL_ERROR "git apply ${patchfile}' failed with ${GIT_PATCH_RESULT}")
    endif()
endfunction()

function(git_update_submodules workingdirectory)
    message(STATUS "Updating submodules in ${workingdirectory}")
    execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive -f
                    WORKING_DIRECTORY ${workingdirectory}
                    RESULT_VARIABLE GIT_SUBMOD_RESULT)
    if(NOT GIT_SUBMOD_RESULT EQUAL "0")
        message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
    endif()
endfunction()
